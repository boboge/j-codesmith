package org.jcodesmith.ui.template.action;

import org.eclipse.jdt.ui.actions.OpenEditorActionGroup;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.ui.IActionBars;
import org.eclipse.ui.ISharedImages;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.actions.ActionContext;
import org.eclipse.ui.actions.ActionGroup;
import org.jcodesmith.ui.template.views.TemplateView;

public class TemplateActionGroup extends ActionGroup {

    private TemplateExecuteAction excuteAction;
    //action
    private OpenDirectoryAction openDirectoryAction;
    private IAction doubleClickAction;
   // private OpenEditorActionGroup fOpenEditorActionGroup;
    
    /**
     * Creates a new <code>ImportActionGroup</code>. The group
     * requires that the selection provided by the part's selection provider
     * is of type <code>org.eclipse.jface.viewers.IStructuredSelection</code>.
     *
     * @param part the view part that owns this action group
     */
    public TemplateActionGroup( ) {
        
     //   fOpenEditorActionGroup=  new OpenEditorActionGroup(TemplateView.getInstance());
        
        excuteAction = new TemplateExecuteAction();
        
        openDirectoryAction = new OpenDirectoryAction(TemplateView.getInstance());
        
        openDirectoryAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages()
                .getImageDescriptor(ISharedImages.IMG_OBJ_FOLDER));

        // action1 = new Action() {
        // public void run() {
        // showMessage("Action 1 executed");
        // }
        // };
        // action1.setText("Action 1");
        // action1.setToolTipText("Action 1 tooltip");
        // action1.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
        // getImageDescriptor(ISharedImages.IMG_OBJS_INFO_TSK));
        //
        // action2 = new Action() {
        // public void run() {
        // showMessage("Action 2 executed");
        // }
        // };
        // action2.setText("Action 2");
        // action2.setToolTipText("Action 2 tooltip");
        // action2.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
        // getImageDescriptor(ISharedImages.IMG_OBJS_INFO_TSK));

        doubleClickAction = new Action() {
            public void run() {
                //TreeNode tn=getSelectFtlFileNode();
            }
        };
    }

    /* (non-Javadoc)
     * Method declared in ActionGroup
     */
    @Override
    public void fillContextMenu(IMenuManager menu) {
        menu.add(excuteAction);
     //   fOpenEditorActionGroup.fillContextMenu(menu);
        super.fillContextMenu(menu);
    }

    
    /* (non-Javadoc)
     * Method declared in ActionGroup
     */
    @Override
    public void setContext(ActionContext context) {
        super.setContext(context);
       // fOpenEditorActionGroup.setContext(context);
    }
    
    /* (non-Javadoc)
     * Method declared in ActionGroup
     */
    @Override
    public void updateActionBars() {
        super.updateActionBars();
     //   fOpenEditorActionGroup.updateActionBars();
    }
    
    
    public void fillActionBars(IActionBars actionBars) {
        actionBars.getMenuManager().add(openDirectoryAction);
       // fOpenEditorActionGroup.fillActionBars(actionBars);
    }
  
    /**
     * {@inheritDoc}
     */
    @Override
    public void dispose() {
        excuteAction.dispose();
    //    fOpenEditorActionGroup.dispose();
        super.dispose();
    }
}
